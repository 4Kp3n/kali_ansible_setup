---
# Change directory ownerships
- name: Recursively change ownership of the ~/Repos directory
  ansible.builtin.file:
    path: /home/{{ user }}/Repos
    state: directory
    recurse: yes
    owner: "{{ user }}"
    group: "{{ user }}"

# Metasploit
- name: Enable Postgresql service
  ignore_errors: yes
  ansible.builtin.systemd:
    name: postgresql.service
    state: started
    enabled: true

- name: Check msfdb status
  ignore_errors: yes
  ansible.builtin.command: msfdb status
  register: msfdb_status
  changed_when: false

- name: Initialize msfdb
  ignore_errors: yes
  ansible.builtin.command: msfdb init
  when: "'No configuration file found' in msfdb_status.stdout"

# OpenSSL
- name: Configure OpenSSL
  ansible.builtin.lineinfile:
    path: /etc/ssl/openssl.cnf
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  loop:
    - regexp: "^MinProtocol ="
      line: "MinProtocol = None"
    - regexp: "^CipherStrings ="
      line: "CipherStrings = DEFAULT"

# Install Oh My Zsh
# Check if Oh My Zsh is already installed globally
- name: Check if Oh My Zsh is already installed
  ansible.builtin.stat:
    path: "{{ zsh_install_dir }}"
  register: oh_my_zsh_installed

# Download and install Oh My Zsh if not installed
- name: Install Oh My Zsh
  ansible.builtin.shell: |
    sh -c "$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
  args:
    executable: /bin/bash
  when: not oh_my_zsh_installed.stat.exists
  environment: 
    ZSH: "{{ zsh_install_dir }}"

# Tmux
- name: Ensure .tmux directory exists
  file:
    path: "/home/{{ user }}/.tmux/"
    owner: "{{ user }}"
    group: "{{ user }}"
    state: directory

- name: Ensure tmux plugins directory exists
  file:
    path: "/home/{{ user }}/.tmux/plugins/"
    owner: "{{ user }}"
    group: "{{ user }}"
    state: directory

- name: Copy zshrc for kali
  ansible.builtin.copy:
    src: /home/{{user}}/Repos/configs/zshrc
    dest: /home/{{user}}/.zshrc
    owner: "{{ user }}"
    group: "{{ user }}"

- name: Copy zshrc for root
  ansible.builtin.copy:
    src: /home/{{user}}/Repos/configs/zshrc
    dest: /root/.zshrc

- name: Copy vim config for kali
  ansible.builtin.copy:
    src: /home/{{user}}/Repos/configs/init.vim
    dest: /home/{{user}}/.config/nvim/init.vim
    owner: "{{ user }}"
    group: "{{ user }}"

# Copy vimrc to root too
- name: Ensure the destination directory exists
  file:
    path: /root/.config/nvim/
    state: directory
    mode: '0755'

- name: Copy vim config for root
  ansible.builtin.copy:
    src: /home/{{user}}/Repos/configs/init.vim
    dest: /root/.config/nvim/init.vim

- name: Install vim plugins for user
  ansible.builtin.shell: nvim +PluginInstall +qall
  become: true
  become_user: "{{ user }}"

- name: Install vim plugins for root
  ansible.builtin.shell: nvim +PluginInstall +qall

# Copy aliase
- name: Copy aliase for user
  ansible.builtin.copy:
    src: /home/{{user}}/Repos/configs/kali-aliase
    dest: /home/{{user}}/.aliase
    owner: "{{ user }}"
    group: "{{ user }}"

- name: Copy aliase for root
  ansible.builtin.copy:
    src: /home/{{user}}/Repos/configs/kali-aliase
    dest: /root/.aliase

# Copy tmux config
- name: Change tmux config
  ansible.builtin.copy:
    src: /home/{{user}}/Repos/configs/tmux.conf
    dest: /home/{{user}}/.tmux.conf
    owner: "{{ user }}"
    group: "{{ user }}"

# Copy /etc/hosts file 
- name: Change /etc/hosts file
  ansible.builtin.copy:
    src: /home/{{user}}/Repos/configs/hosts
    dest: /etc/hosts

# Copy xfce4-power-manager.xml to disable screen lock
- name: Copy xfce4-power-manager.xml
  ansible.builtin.copy:
    src: /home/{{user}}/Repos/configs/xfce4-power-manager.xml
    dest: /home/{{user}}/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-power-manager.xml
    owner: "{{ user }}"
    group: "{{ user }}"
      
# Fix the issue with arsenal by activating dev.tty.legacy_tiocsti
- name: Fix arsenal
  ansible.builtin.shell: echo "dev.tty.legacy_tiocsti=1" >> /etc/sysctl.conf
- name: Fix for current session too
  ansible.builtin.shell: sysctl -w dev.tty.legacy_tiocsti=1
  
# Install pyenv to switch between Python versions 
# based on this: https://www.kali.org/docs/general-use/using-eol-python-versions/
- name: Check if pyenv is already installed
  ansible.builtin.stat:
    path: /home/{{ user }}/.pyenv
  register: pyenv_installed


- name: Install pyenv
  become: true
  become_user: "{{ user }}"
  ansible.builtin.shell: curl https://pyenv.run | bash
  args:
    chdir: /home/{{user}}
  when: not pyenv_installed.stat.exists
